{"version":3,"sources":["webpack:///webpack/bootstrap f679dd37153a223fc570","webpack:///./src/classes/Board.js","webpack:///./src/classes/Player.js","webpack:///./src/style.scss","webpack:///./src/index.js"],"names":["Board","state","formattedString","forEach","cell","index","slice","console","log","every","symbol","position","moves","push","isEmpty","isFull","Player","max_depth","nodes_map","Map","board","maximizing","callback","depth","constructor","name","TRACE","window","trace_ttt","clear","isTerminal","winner","console_styles","turn_and_available_moves","exploring_parent","exploring_child","parent_heuristic","child_heuristic","all_moves","best_move","p","getAvailableMoves","join","printFormattedBoard","arr","rand","ret","best","child","insert","styles","node_value","getBestMove","Math","max","has","get","set","split","floor","random","length","value","min","hasClass","el","className","classList","contains","match","RegExp","addClass","add","removeClass","remove","reg","replace","drawWinningLine","direction","row","document","getElementById","setTimeout","newGame","starting_player","parseInt","b","innerHTML","html_cells","children","starting","player_turn","center_and_corners","first_choice","addEventListener","event","target","tagName","depth_choices","choice","dataset","starting_player_choices"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AChEA;;;;IAIMA,K;AACF;AACA,qBAAkD;AAAA,YAAtCC,KAAsC,uEAA9B,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,CAA8B;;AAAA;;AAC9C,aAAKA,KAAL,GAAaA,KAAb;AACH;AACD;;;;;8CACsB;AAClB,gBAAIC,kBAAkB,EAAtB;AACA,iBAAKD,KAAL,CAAWE,OAAX,CAAmB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChCH,mCAAmBE,aAAWA,IAAX,UAAsB,MAAzC;AACA,oBAAG,CAACC,QAAQ,CAAT,IAAc,CAAd,IAAmB,CAAtB,EAA0B;AACtBH,sCAAkBA,gBAAgBI,KAAhB,CAAsB,CAAtB,EAAwB,CAAC,CAAzB,CAAlB;AACA,wBAAGD,QAAQ,CAAX,EAAcH,mBAAmB,8DAAnB;AACjB;AACJ,aAND;AAOAK,oBAAQC,GAAR,CAAY,OAAON,eAAnB,EAAoC,+BAApC;AACH;AACD;;;;kCACU;AACN,mBAAO,KAAKD,KAAL,CAAWQ,KAAX,CAAiB;AAAA,uBAAQ,CAACL,IAAT;AAAA,aAAjB,CAAP;AACH;AACD;;;;iCACS;AACL,mBAAO,KAAKH,KAAL,CAAWQ,KAAX,CAAiB;AAAA,uBAAQL,IAAR;AAAA,aAAjB,CAAP;AACH;AACD;;;;;;;;;+BAMOM,M,EAAQC,Q,EAAU;AACrB,gBAAGA,WAAW,CAAX,IAAgB,KAAKV,KAAL,CAAWU,QAAX,CAAnB,EAAyC,OAAO,KAAP,CADpB,CACkC;AACvD,iBAAKV,KAAL,CAAWU,QAAX,IAAuBD,MAAvB;AACA,mBAAO,IAAP;AACH;AACD;;;;4CACoB;AAChB,gBAAME,QAAQ,EAAd;AACA,iBAAKX,KAAL,CAAWE,OAAX,CAAmB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChC,oBAAG,CAACD,IAAJ,EAAUQ,MAAMC,IAAN,CAAWR,KAAX;AACb,aAFD;AAGA,mBAAOO,KAAP;AACH;AACD;;;;;;;qCAIa;AACT;AACA,gBAAG,KAAKE,OAAL,EAAH,EAAmB,OAAO,KAAP;;AAEnB;AACA,gBAAG,KAAKb,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;AACD,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;AACD,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;;AAED;AACA,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;AACD,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;AACD,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;;AAED;AACA,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;AACD,gBAAG,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAjB,IAAkC,KAAKA,KAAL,CAAW,CAAX,KAAiB,KAAKA,KAAL,CAAW,CAAX,CAAnD,IAAoE,KAAKA,KAAL,CAAW,CAAX,CAAvE,EAAsF;AAClF,uBAAO,EAAC,UAAU,KAAKA,KAAL,CAAW,CAAX,CAAX,EAA0B,aAAa,GAAvC,EAA4C,OAAO,CAAnD,EAAP;AACH;;AAED;AACA,gBAAG,KAAKc,MAAL,EAAH,EAAkB;AACd,uBAAO,EAAC,UAAU,MAAX,EAAP;AACH;;AAED;AACA,mBAAO,KAAP;AACH;;;;;;kBAGUf,K;;;;;;;;;;;;;;;;;AChGf;;;;;;;;AAEA;;;;;IAKMgB,M;AACL,mBAA4B;AAAA,MAAhBC,SAAgB,uEAAJ,CAAC,CAAG;;AAAA;;AACrB,OAAKA,SAAL,GAAiBA,SAAjB;AACA,OAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACH;AACD;;;;;;;;;;;;8BAQSC,K,EAA0D;AAAA,OAAnDC,UAAmD,uEAAtC,IAAsC;;AAAA;;AAAA,OAAhCC,QAAgC,uEAArB,YAAM,CAAE,CAAa;AAAA,OAAXC,KAAW,uEAAH,CAAG;;AACrE;AACA,OAAGH,MAAMI,WAAN,CAAkBC,IAAlB,KAA2B,OAA9B,EAAuC,MAAM,oFAAN;AACvC;AACA,OAAMC,QAAQC,OAAOC,SAArB;AACA;AACA,OAAGL,SAAS,CAAZ,EAAe,KAAKL,SAAL,CAAeW,KAAf;;AAEf;AACA,OAAGT,MAAMU,UAAN,MAAsBP,SAAS,KAAKN,SAAvC,EAAmD;AAClD,QAAGG,MAAMU,UAAN,GAAmBC,MAAnB,IAA6B,GAAhC,EAAqC;AACpC,YAAO,MAAMR,KAAb;AACA,KAFD,MAEO,IAAIH,MAAMU,UAAN,GAAmBC,MAAnB,IAA6B,GAAjC,EAAsC;AAC5C,YAAO,CAAC,GAAD,GAAOR,KAAd;AACA;AACD,WAAO,CAAP;AACA;;AAED;AACA,OAAMS,iBAAiB;AACtBC,8BAA0B,kEADJ;AAEtBC,sBAAkB,+DAFI;AAGtBC,qBAAiB,6CAHK;AAItBC,sBAAkB,kEAJI;AAKtBC,qBAAiB,kEALK;AAMtBC,eAAW,+DANW;AAOtBC,eAAW;AAPW,IAAvB;AASA;AA5BqE,OA6B9DN,wBA7B8D,GA6B0DD,cA7B1D,CA6B9DC,wBA7B8D;AAAA,OA6BpCC,gBA7BoC,GA6B0DF,cA7B1D,CA6BpCE,gBA7BoC;AAAA,OA6BlBC,eA7BkB,GA6B0DH,cA7B1D,CA6BlBG,eA7BkB;AAAA,OA6BDE,eA7BC,GA6B0DL,cA7B1D,CA6BDK,eA7BC;AAAA,OA6BgBD,gBA7BhB,GA6B0DJ,cA7B1D,CA6BgBI,gBA7BhB;AAAA,OA6BkCE,SA7BlC,GA6B0DN,cA7B1D,CA6BkCM,SA7BlC;AAAA,OA6B6CC,SA7B7C,GA6B0DP,cA7B1D,CA6B6CO,SA7B7C;;AA+BrE;;AACA,OAAGb,KAAH,EAAU;AACT,QAAIc,IAAInB,aAAa,YAAb,GAA4B,YAApC;AACAd,YAAQC,GAAR,QAAiBgC,CAAjB,+BAA2CjB,KAA3C,EAAoDU,wBAApD;AACA1B,YAAQC,GAAR,yBAAkCY,MAAMqB,iBAAN,GAA0BC,IAA1B,CAA+B,GAA/B,CAAlC,EAAyET,wBAAzE;AACA,QAAGV,SAAS,CAAZ,EAAeH,MAAMuB,mBAAN;AACf;;AAED;AACA,OAAGtB,UAAH,EAAe;AAAA,QAyCRuB,GAzCQ;AAAA,QA0CRC,IA1CQ;AAAA,QA2CRC,GA3CQ;;AAAA;AACd;AACA,SAAIC,OAAO,CAAC,GAAZ;AACA;AACA3B,WAAMqB,iBAAN,GAA0BtC,OAA1B,CAAkC,iBAAS;AAC1C;AACA,UAAI6C,QAAQ,oBAAU5B,MAAMnB,KAAN,CAAYK,KAAZ,EAAV,CAAZ;AACA;AACA0C,YAAMC,MAAN,CAAa,GAAb,EAAkB5C,KAAlB;;AAEA;AACA,UAAGqB,KAAH,EAAU;AACT,WAAIwB,SAAU3B,SAAS,CAAV,GAAeW,gBAAf,GAAkCC,eAA/C;AACA5B,eAAQC,GAAR,uBAAgCH,KAAhC,EAAyC6C,MAAzC;AACAF,aAAML,mBAAN;AACA;;AAED;AACA,UAAIQ,aAAa,MAAKC,WAAL,CAAiBJ,KAAjB,EAAwB,KAAxB,EAA+B1B,QAA/B,EAAyCC,QAAQ,CAAjD,CAAjB;AACA;AACAwB,aAAOM,KAAKC,GAAL,CAASP,IAAT,EAAeI,UAAf,CAAP;;AAEA;AACA,UAAGzB,KAAH,EAAU;AACT,WAAGH,SAAS,CAAZ,EAAe;AACdhB,gBAAQC,GAAR,aAAsBH,KAAtB,sCAA4D8C,UAA5D,EAA0Ef,gBAA1E;AACA,QAFD,MAEO;AACN7B,gBAAQC,GAAR,mBAA4BH,KAA5B,sCAAkE8C,UAAlE,EAAgFd,eAAhF;AACA;AACD;;AAED;AACA,UAAGd,SAAS,CAAZ,EAAe;AACd;AACA,WAAIX,QAAQ,MAAKM,SAAL,CAAeqC,GAAf,CAAmBJ,UAAnB,IAAoC,MAAKjC,SAAL,CAAesC,GAAf,CAAmBL,UAAnB,CAApC,SAAsE9C,KAAtE,GAAgFA,KAA5F;AACA,aAAKa,SAAL,CAAeuC,GAAf,CAAmBN,UAAnB,EAA+BvC,KAA/B;AACA;AACD,MAjCD;AAkCA;AACA,SAAGW,SAAS,CAAZ,EAAe;AACd,UAAG,OAAO,MAAKL,SAAL,CAAesC,GAAf,CAAmBT,IAAnB,CAAP,IAAmC,QAAtC,EAAgD;AAC3CH,aAAM,MAAK1B,SAAL,CAAesC,GAAf,CAAmBT,IAAnB,EAAyBW,KAAzB,CAA+B,GAA/B,CADqC;AAE3Cb,cAAOQ,KAAKM,KAAL,CAAWN,KAAKO,MAAL,KAAgBhB,IAAIiB,MAA/B,CAFoC;AAG3Cf,aAAMF,IAAIC,IAAJ,CAHqC;AAI/C,OAJD,MAIO;AACNC,aAAM,MAAK5B,SAAL,CAAesC,GAAf,CAAmBT,IAAnB,CAAN;AACA;AACD;AACA,UAAGrB,KAAH,EAAU;AACT,aAAKR,SAAL,CAAef,OAAf,CAAuB,UAACE,KAAD,EAAOyD,KAAP,EAAiB;AACvCvD,gBAAQC,GAAR,gBAAyBH,KAAzB,iBAA0CyD,KAA1C,EAAmDxB,SAAnD;AACA,QAFD;AAGA/B,eAAQC,GAAR,aAAsBsC,GAAtB,oCAA0DP,SAA1D;AACA;AACD;AACAjB,eAASwB,GAAT;AACA;AAAA,UAAOA;AAAP;AACA;AACD;AACA;AAAA,SAAOC;AAAP;AA3Dc;;AAAA;AA4Dd;;AAED,OAAG,CAAC1B,UAAJ,EAAgB;AAAA,QAyCTuB,GAzCS;AAAA,QA0CTC,IA1CS;AAAA,QA2CTC,GA3CS;;AAAA;AACf;AACA,SAAIC,OAAO,GAAX;AACA;AACA3B,WAAMqB,iBAAN,GAA0BtC,OAA1B,CAAkC,iBAAS;AAC1C;AACA,UAAI6C,QAAQ,oBAAU5B,MAAMnB,KAAN,CAAYK,KAAZ,EAAV,CAAZ;AACA;AACA0C,YAAMC,MAAN,CAAa,GAAb,EAAkB5C,KAAlB;;AAEA;AACA,UAAGqB,KAAH,EAAU;AACT,WAAIwB,SAAU3B,SAAS,CAAV,GAAeW,gBAAf,GAAkCC,eAA/C;AACA5B,eAAQC,GAAR,uBAAgCH,KAAhC,EAAyC6C,MAAzC;AACAF,aAAML,mBAAN;AACA;;AAED;AACA,UAAIQ,aAAa,MAAKC,WAAL,CAAiBJ,KAAjB,EAAwB,IAAxB,EAA8B1B,QAA9B,EAAwCC,QAAQ,CAAhD,CAAjB;AACA;AACAwB,aAAOM,KAAKU,GAAL,CAAShB,IAAT,EAAeI,UAAf,CAAP;;AAEA;AACA,UAAGzB,KAAH,EAAU;AACT,WAAGH,SAAS,CAAZ,EAAe;AACdhB,gBAAQC,GAAR,aAAsBH,KAAtB,sCAA4D8C,UAA5D,EAA0Ef,gBAA1E;AACA,QAFD,MAEO;AACN7B,gBAAQC,GAAR,mBAA4BH,KAA5B,sCAAkE8C,UAAlE,EAAgFd,eAAhF;AACA;AACD;;AAED;AACA,UAAGd,SAAS,CAAZ,EAAe;AACd;AACA,WAAIX,QAAQ,MAAKM,SAAL,CAAeqC,GAAf,CAAmBJ,UAAnB,IAAiC,MAAKjC,SAAL,CAAesC,GAAf,CAAmBL,UAAnB,IAAiC,GAAjC,GAAuC9C,KAAxE,GAAgFA,KAA5F;AACA,aAAKa,SAAL,CAAeuC,GAAf,CAAmBN,UAAnB,EAA+BvC,KAA/B;AACA;AACD,MAjCD;AAkCA;AACA,SAAGW,SAAS,CAAZ,EAAe;AACd,UAAG,OAAO,MAAKL,SAAL,CAAesC,GAAf,CAAmBT,IAAnB,CAAP,IAAmC,QAAtC,EAAgD;AAC3CH,aAAM,MAAK1B,SAAL,CAAesC,GAAf,CAAmBT,IAAnB,EAAyBW,KAAzB,CAA+B,GAA/B,CADqC;AAE3Cb,cAAOQ,KAAKM,KAAL,CAAWN,KAAKO,MAAL,KAAgBhB,IAAIiB,MAA/B,CAFoC;AAG3Cf,aAAMF,IAAIC,IAAJ,CAHqC;AAI/C,OAJD,MAIO;AACNC,aAAM,MAAK5B,SAAL,CAAesC,GAAf,CAAmBT,IAAnB,CAAN;AACA;AACD;AACA,UAAGrB,KAAH,EAAU;AACT,aAAKR,SAAL,CAAef,OAAf,CAAuB,UAACE,KAAD,EAAOyD,KAAP,EAAiB;AACvCvD,gBAAQC,GAAR,gBAAyBH,KAAzB,iBAA0CyD,KAA1C,EAAmDxB,SAAnD;AACA,QAFD;AAGA/B,eAAQC,GAAR,aAAsBsC,GAAtB,oCAA0DP,SAA1D;AACA;AACD;AACAjB,eAASwB,GAAT;AACA;AAAA,UAAOA;AAAP;AACA;AACD;AACA;AAAA,SAAOC;AAAP;AA3De;;AAAA;AA4Df;AAED;;;;;;kBAGa/B,M;;;;;;AC3Lf,yC;;;;;;;;;ACAA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,SAASgD,QAAT,CAAkBC,EAAlB,EAAsBC,SAAtB,EAAiC;AAC/B,KAAID,GAAGE,SAAP,EACE,OAAOF,GAAGE,SAAH,CAAaC,QAAb,CAAsBF,SAAtB,CAAP,CADF,KAGE,OAAO,CAAC,CAACD,GAAGC,SAAH,CAAaG,KAAb,CAAmB,IAAIC,MAAJ,CAAW,YAAYJ,SAAZ,GAAwB,SAAnC,CAAnB,CAAT;AACH;AACD,SAASK,QAAT,CAAkBN,EAAlB,EAAsBC,SAAtB,EAAiC;AAC/B,KAAID,GAAGE,SAAP,EACEF,GAAGE,SAAH,CAAaK,GAAb,CAAiBN,SAAjB,EADF,KAEK,IAAI,CAACF,SAASC,EAAT,EAAaC,SAAb,CAAL,EAA8BD,GAAGC,SAAH,IAAgB,MAAMA,SAAtB;AACpC;AACD,SAASO,WAAT,CAAqBR,EAArB,EAAyBC,SAAzB,EAAoC;AAClC,KAAID,GAAGE,SAAP,EACEF,GAAGE,SAAH,CAAaO,MAAb,CAAoBR,SAApB,EADF,KAEK,IAAIF,SAASC,EAAT,EAAaC,SAAb,CAAJ,EAA6B;AAChC,MAAIS,MAAM,IAAIL,MAAJ,CAAW,YAAYJ,SAAZ,GAAwB,SAAnC,CAAV;AACAD,KAAGC,SAAH,GAAaD,GAAGC,SAAH,CAAaU,OAAb,CAAqBD,GAArB,EAA0B,GAA1B,CAAb;AACD;AACF;;AAED;;;;AAIA,SAASE,eAAT,OAA6C;AAAA,KAAlBC,SAAkB,QAAlBA,SAAkB;AAAA,KAAPC,GAAO,QAAPA,GAAO;;AAC5C,KAAI3D,QAAQ4D,SAASC,cAAT,CAAwB,OAAxB,CAAZ;AACA7D,OAAM8C,SAAN,QAAqBY,SAArB,GAAiCC,GAAjC;AACAG,YAAW,YAAM;AAAE9D,QAAM8C,SAAN,IAAmB,OAAnB;AAA6B,EAAhD,EAAkD,EAAlD;AACA;;AAGD;AACA,SAASiB,OAAT,GAAkD;AAAA,KAAjC5D,KAAiC,uEAAzB,CAAC,CAAwB;AAAA,KAArB6D,eAAqB,uEAAH,CAAG;;AACjD;AACA,KAAI5C,IAAI,qBAAW6C,SAAS9D,KAAT,CAAX,CAAR;AACA,KAAI+D,IAAI,oBAAU,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,EAAgB,EAAhB,EAAmB,EAAnB,EAAsB,EAAtB,EAAyB,EAAzB,CAAV,CAAR;;AAEA;AACA,KAAIlE,QAAQ4D,SAASC,cAAT,CAAwB,OAAxB,CAAZ;AACA7D,OAAM8C,SAAN,GAAkB,EAAlB;AACA9C,OAAMmE,SAAN,GAAkB,4OAAlB;;AAEA;AACAd,aAAYO,SAASC,cAAT,CAAwB,aAAxB,CAAZ,EAAoD,iBAApD;AACAR,aAAYO,SAASC,cAAT,CAAwB,aAAxB,CAAZ,EAAoD,iBAApD;;AAEA;AACA,KAAIO,0CAAiBpE,MAAMqE,QAAvB,EAAJ;;AAEA;AACA,KAAIC,WAAWL,SAASD,eAAT,CAAf;AAAA,KACC/D,aAAaqE,QADd;AAAA,KAECC,cAAcD,QAFf;;AAIA;AACA,KAAG,CAACA,QAAJ,EAAc;AACb,MAAIE,qBAAqB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAzB;AACA,MAAIC,eAAeD,mBAAmBvC,KAAKM,KAAL,CAAWN,KAAKO,MAAL,KAAcgC,mBAAmB/B,MAA5C,CAAnB,CAAnB;AACA,MAAInD,SAAS,CAACW,UAAD,GAAc,GAAd,GAAoB,GAAjC;AACAiE,IAAErC,MAAF,CAASvC,MAAT,EAAiBmF,YAAjB;AACAtB,WAASiB,WAAWK,YAAX,CAAT,EAAmCnF,MAAnC;AACAiF,gBAAc,CAAd,CANa,CAMI;AACjB;;AAED;AACEL,GAAErF,KAAF,CAAQE,OAAR,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChCmF,aAAWnF,KAAX,EAAkByF,gBAAlB,CAAmC,OAAnC,EAA4C,YAAM;AACjD;AACA,OAAG9B,SAASwB,WAAWnF,KAAX,CAAT,EAA4B,GAA5B,KAAoC2D,SAASwB,WAAWnF,KAAX,CAAT,EAA4B,GAA5B,CAApC,IAAwEiF,EAAExD,UAAF,EAAxE,IAA0F,CAAC6D,WAA9F,EAA2G,OAAO,KAAP;;AAE3G,OAAIjF,SAASW,aAAa,GAAb,GAAmB,GAAhC,CAJiD,CAIZ;;AAErC;AACAiE,KAAErC,MAAF,CAASvC,MAAT,EAAiBL,KAAjB;AACAkE,YAASiB,WAAWnF,KAAX,CAAT,EAA4BK,MAA5B;;AAEA;AACA,OAAG4E,EAAExD,UAAF,EAAH,EAAmB;AAAA,wBACDwD,EAAExD,UAAF,EADC;AAAA,QACZC,MADY,iBACZA,MADY;;AAEpB,QAAGA,WAAW,MAAd,EAAsBwC,SAASS,SAASC,cAAT,CAAwB,aAAxB,CAAT,EAAiD,iBAAjD;AACpBJ,oBAAgBS,EAAExD,UAAF,EAAhB;AACA;AACD6D,iBAAc,CAAd,CAhBiD,CAgBhC;;AAEjB;AACAnD,KAAEY,WAAF,CAAckC,CAAd,EAAiB,CAACjE,UAAlB,EAA8B,gBAAQ;AACrC,QAAIX,SAAS,CAACW,UAAD,GAAc,GAAd,GAAoB,GAAjC;AACAiE,MAAErC,MAAF,CAASvC,MAAT,EAAiBqC,IAAjB;AACAwB,aAASiB,WAAWzC,IAAX,CAAT,EAA2BrC,MAA3B;AACA,QAAG4E,EAAExD,UAAF,EAAH,EAAmB;AAAA,0BACDwD,EAAExD,UAAF,EADC;AAAA,SACZC,OADY,kBACZA,MADY;;AAEpB,SAAGA,YAAW,MAAd,EAAsBwC,SAASS,SAASC,cAAT,CAAwB,aAAxB,CAAT,EAAiD,iBAAjD;AACpBJ,qBAAgBS,EAAExD,UAAF,EAAhB;AACA;AACD6D,kBAAc,CAAd,CATqC,CASpB;AACjB,IAVD;AAWA,GA9BD,EA8BG,KA9BH;AA+BA,MAAGvF,IAAH,EAASmE,SAASiB,WAAWnF,KAAX,CAAT,EAA4BD,IAA5B;AACT,EAjCD;AAkCF;;AAED4E,SAASc,gBAAT,CAA0B,kBAA1B,EAA8C,iBAAS;;AAEtD;AACA,KAAIvE,QAAQ,CAAC,CAAb;AACA,KAAI6D,kBAAkB,CAAtB;AACAD,SAAQ5D,KAAR,EAAe6D,eAAf;;AAGA;AACAJ,UAASC,cAAT,CAAwB,OAAxB,EAAiCa,gBAAjC,CAAkD,OAAlD,EAA2D,UAACC,KAAD,EAAW;AACrE,MAAGA,MAAMC,MAAN,CAAaC,OAAb,KAAyB,IAAzB,IAAiCjC,SAAS+B,MAAMC,MAAf,EAAuB,QAAvB,CAApC,EAAsE;AACtE,MAAIE,6CAAoBlB,SAASC,cAAT,CAAwB,OAAxB,EAAiCQ,QAAjC,CAA0C,CAA1C,EAA6CA,QAAjE,EAAJ;AACAS,gBAAc/F,OAAd,CAAsB,UAACgG,MAAD,EAAY;AACjC1B,eAAY0B,MAAZ,EAAoB,QAApB;AACA,GAFD;AAGA5B,WAASwB,MAAMC,MAAf,EAAuB,QAAvB;AACAzE,UAAQwE,MAAMC,MAAN,CAAaI,OAAb,CAAqBtC,KAA7B;AACA,EARD,EAQG,KARH;;AAUAkB,UAASC,cAAT,CAAwB,iBAAxB,EAA2Ca,gBAA3C,CAA4D,OAA5D,EAAqE,UAACC,KAAD,EAAW;AAC/E,MAAGA,MAAMC,MAAN,CAAaC,OAAb,KAAyB,IAAzB,IAAiCjC,SAAS+B,MAAMC,MAAf,EAAuB,QAAvB,CAApC,EAAsE;AACtE,MAAIK,uDAA8BrB,SAASC,cAAT,CAAwB,iBAAxB,EAA2CQ,QAA3C,CAAoD,CAApD,EAAuDA,QAArF,EAAJ;AACAY,0BAAwBlG,OAAxB,CAAgC,UAACgG,MAAD,EAAY;AAC3C1B,eAAY0B,MAAZ,EAAoB,QAApB;AACA,GAFD;AAGA5B,WAASwB,MAAMC,MAAf,EAAuB,QAAvB;AACAZ,oBAAkBW,MAAMC,MAAN,CAAaI,OAAb,CAAqBtC,KAAvC;AACA,EARD,EAQG,KARH;;AAUAkB,UAASC,cAAT,CAAwB,SAAxB,EAAmCa,gBAAnC,CAAoD,OAApD,EAA6D,YAAM;AAClEX,UAAQ5D,KAAR,EAAe6D,eAAf;AACA,EAFD;AAIA,CAjCD,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f679dd37153a223fc570","/**\r\n  * @desc This class represents the board, contains methods that checks board state, insert a symbol, etc..\r\n  * @param {Array} state - an array representing the state of the board\r\n*/\r\nclass Board {\r\n    //Initializing the board\r\n    constructor(state = ['','','','','','','','','']) {\r\n        this.state = state;\r\n    }\r\n    //Logs a visualised board with the current state to the console\r\n    printFormattedBoard() {\r\n        let formattedString = '';\r\n        this.state.forEach((cell, index) => {\r\n            formattedString += cell ? ` ${cell} |` : '   |';\r\n            if((index + 1) % 3 == 0)  {\r\n                formattedString = formattedString.slice(0,-1);\r\n                if(index < 8) formattedString += '\\n\\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015 \\u2015\\u2015\\u2015\\n';\r\n            }\r\n        });\r\n        console.log('%c' + formattedString, 'color: #6d4e42;font-size:16px');\r\n    }\r\n    //Checks if board has no symbols yet\r\n    isEmpty() {\r\n        return this.state.every(cell => !cell);\r\n    }\r\n    //Check if board has no spaces available\r\n    isFull() {\r\n        return this.state.every(cell => cell);\r\n    }\r\n    /**\r\n     * Inserts a new symbol(x,o) into\r\n     * @param {String} symbol \r\n     * @param {Number} position\r\n     * @return {Boolean} boolean represent success of the operation\r\n     */\r\n    insert(symbol, position) {\r\n        if(position > 8 || this.state[position]) return false; //Cell is either occupied or does not exist\r\n        this.state[position] = symbol;\r\n        return true;\r\n    }\r\n    //Returns an array containing available moves for the current state\r\n    getAvailableMoves() {\r\n        const moves = [];\r\n        this.state.forEach((cell, index) => {\r\n            if(!cell) moves.push(index); \r\n        });\r\n        return moves;\r\n    }\r\n    /**\r\n     * Checks if the board has a terminal state ie. a player wins or the board is full with no winner\r\n     * @return {Object} an object containing the winner, direction of winning and row number\r\n     */\r\n    isTerminal() {\r\n        //Return False if board in empty\r\n        if(this.isEmpty()) return false;\r\n\r\n        //Checking Horizontal Wins\r\n        if(this.state[0] == this.state[1] && this.state[0] == this.state[2] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'H', 'row': 1};\r\n        }\r\n        if(this.state[3] == this.state[4] && this.state[3] == this.state[5] && this.state[3]) {\r\n            return {'winner': this.state[3], 'direction': 'H', 'row': 2};\r\n        }\r\n        if(this.state[6] == this.state[7] && this.state[6] == this.state[8] && this.state[6]) {\r\n            return {'winner': this.state[6], 'direction': 'H', 'row': 3};\r\n        }\r\n\r\n        //Checking Vertical Wins\r\n        if(this.state[0] == this.state[3] && this.state[0] == this.state[6] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'V', 'row': 1};\r\n        }\r\n        if(this.state[1] == this.state[4] && this.state[1] == this.state[7] && this.state[1]) {\r\n            return {'winner': this.state[1], 'direction': 'V', 'row': 2};\r\n        }\r\n        if(this.state[2] == this.state[5] && this.state[2] == this.state[8] && this.state[2]) {\r\n            return {'winner': this.state[2], 'direction': 'V', 'row': 3};\r\n        }\r\n\r\n        //Checking Diagonal Wins\r\n        if(this.state[0] == this.state[4] && this.state[0] == this.state[8] && this.state[0]) {\r\n            return {'winner': this.state[0], 'direction': 'D', 'row': 1};\r\n        }\r\n        if(this.state[2] == this.state[4] && this.state[2] == this.state[6] && this.state[2]) {\r\n            return {'winner': this.state[2], 'direction': 'D', 'row': 2};\r\n        }\r\n\r\n        //If no winner but the board is full, then it's a draw\r\n        if(this.isFull()) {\r\n            return {'winner': 'draw'};\r\n        }\r\n        \r\n        //return false otherwise\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Board;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Board.js","import Board from './Board';\r\n\r\n/**\r\n  * @desc This class represents the computer player, contains a single method that uses minimax to get the best move\r\n  * @param {Number} max_depth - limits the depth of searching\r\n  * @param {Map} nodes_map - stores the heuristic values for each possible move\r\n*/\r\nclass Player {\r\n\tconstructor(max_depth = -1) {\r\n        this.max_depth = max_depth;\r\n        this.nodes_map = new Map();\r\n    }\r\n    /**\r\n     * Uses minimax algorithm to get the best move\r\n     * @param {Object} board - an instant of the board class\r\n     * @param {Boolean} maximizing - whether the player is a maximizing or a minimizing player\r\n     * @param {Function} callback - a function to run after the best move calculation is done\r\n     * @param {Number} depth - used internally in the function to increment the depth each recursive call\r\n     * @return {Number} the index of the best move\r\n     */\r\n\tgetBestMove(board, maximizing = true, callback = () => {}, depth = 0) {\r\n\t\t//Throw an error if the first argument is not a board\r\n\t\tif(board.constructor.name !== \"Board\") throw('The first argument to the getBestMove method should be an instance of Board class.');\r\n\t\t//Decides whether to log each tree iteration to the console\r\n\t\tconst TRACE = window.trace_ttt; \r\n\t\t//clear nodes_map if the function is called for a new move\r\n\t\tif(depth == 0) this.nodes_map.clear();\r\n\r\n\t\t//If the board state is a terminal one, return the heuristic value\r\n\t\tif(board.isTerminal() || depth == this.max_depth ) {\r\n\t\t\tif(board.isTerminal().winner == 'x') {\r\n\t\t\t\treturn 100 - depth;\r\n\t\t\t} else if (board.isTerminal().winner == 'o') {\r\n\t\t\t\treturn -100 + depth;\r\n\t\t\t} \r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t//Defining some styles for console logging\r\n\t\tconst console_styles = {\r\n\t\t\tturn_and_available_moves: 'background: #7f3192; color: #fff; font-size:14px;padding: 0 5px;',\r\n\t\t\texploring_parent: 'background: #353535;color: #fff;padding: 0 5px;font-size:18px',\r\n\t\t\texploring_child: 'background: #f03;color: #fff;padding: 0 5px',\r\n\t\t\tparent_heuristic: 'background: #26d47c; color: #fff; font-size:14px;padding: 0 5px;',\r\n\t\t\tchild_heuristic: 'background: #5f9ead; color: #fff; font-size:14px;padding: 0 5px;',\r\n\t\t\tall_moves: 'background: #e27a50;color: #fff;padding: 0 5px;font-size:14px',\r\n\t\t\tbest_move: 'background: #e8602a;color: #fff;padding: 0 5px;font-size:18px'\r\n\t\t};\r\n\t\t//Destructuring Styles\r\n\t\tconst {turn_and_available_moves, exploring_parent, exploring_child, child_heuristic, parent_heuristic, all_moves, best_move} = console_styles;\r\n\r\n\t\t//Console Tracing Code\r\n\t\tif(TRACE) {\r\n\t\t\tlet p = maximizing ? 'Maximizing' : 'Minimizing';\r\n\t\t\tconsole.log(`%c${p} player's turn Depth: ${depth}`, turn_and_available_moves);\r\n\t\t\tconsole.log(`%cAvailable Moves: ${board.getAvailableMoves().join(' ')}`, turn_and_available_moves);\r\n\t\t\tif(depth == 0) board.printFormattedBoard();\r\n\t\t}\r\n\r\n\t\t//Current player is maximizing\r\n\t\tif(maximizing) {\r\n\t\t\t//Initializ best to the lowest possible value\r\n\t\t\tlet best = -100;\r\n\t\t\t//Loop through all empty cells\r\n\t\t\tboard.getAvailableMoves().forEach(index => {\r\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n\t\t\t\tlet child = new Board(board.state.slice());\r\n\t\t\t\t//Create a child node by inserting the maximizing symbol x into the current emoty cell\r\n\t\t\t\tchild.insert('x', index);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child;\r\n\t\t\t\t\tconsole.log(`%cExploring move ${index}`, styles);\r\n\t\t\t\t\tchild.printFormattedBoard();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//Recursively calling getBestMove this time with the new board and minimizing turn and incrementing the depth\r\n\t\t\t\tlet node_value = this.getBestMove(child, false, callback, depth + 1);\r\n\t\t\t\t//Updating best value\r\n\t\t\t\tbest = Math.max(best, node_value);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t\tconsole.log(`%cMove ${index} yielded a heuristic value of ${node_value}`, parent_heuristic);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(`%cChild move ${index} yielded a heuristic value of ${node_value}`, child_heuristic);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\r\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? `${this.nodes_map.get(node_value)},${index}` : index;\r\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n\t\t\tif(depth == 0) {\r\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\r\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\r\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\r\n\t\t\t\t\tvar ret = arr[rand];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret = this.nodes_map.get(best);\r\n\t\t\t\t}\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tthis.nodes_map.forEach((index,value) => {\r\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\r\n\t\t\t\t}\r\n\t\t\t\t//run a callback after calculation and return the index\r\n\t\t\t\tcallback(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t\tif(!maximizing) {\r\n\t\t\t//Initializ best to the highest possible value\r\n\t\t\tlet best = 100;\r\n\t\t\t//Loop through all empty cells\r\n\t\t\tboard.getAvailableMoves().forEach(index => {\r\n\t\t\t\t//Initialize a new board with the current state (slice() is used to create a new array and not modify the original)\r\n\t\t\t\tlet child = new Board(board.state.slice());\r\n\t\t\t\t//Create a child node by inserting the minimizing symbol o into the current emoty cell\r\n\t\t\t\tchild.insert('o', index);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tlet styles = (depth == 0) ? exploring_parent : exploring_child; \r\n\t\t\t\t\tconsole.log(`%cExploring move ${index}`, styles);\r\n\t\t\t\t\tchild.printFormattedBoard();\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t//Recursively calling getBestMove this time with the new board and maximizing turn and incrementing the depth\r\n\t\t\t\tlet node_value = this.getBestMove(child, true, callback, depth + 1);\r\n\t\t\t\t//Updating best value\r\n\t\t\t\tbest = Math.min(best, node_value);\r\n\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t\tconsole.log(`%cMove ${index} yielded a heuristic value of ${node_value}`, parent_heuristic);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(`%cChild move ${index} yielded a heuristic value of ${node_value}`, child_heuristic);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//If it's the main function call, not a recursive one, map each heuristic value with it's moves indicies\r\n\t\t\t\tif(depth == 0) {\r\n\t\t\t\t\t//Comma seperated indicies if multiple moves have the same heuristic value\r\n\t\t\t\t\tvar moves = this.nodes_map.has(node_value) ? this.nodes_map.get(node_value) + ',' + index : index;\r\n\t\t\t\t\tthis.nodes_map.set(node_value, moves);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t//If it's the main call, return the index of the best move or a random index if multiple indicies have the same value\r\n\t\t\tif(depth == 0) {\r\n\t\t\t\tif(typeof this.nodes_map.get(best) == 'string') {\r\n\t\t\t\t\tvar arr = this.nodes_map.get(best).split(',');\r\n\t\t\t\t\tvar rand = Math.floor(Math.random() * arr.length);\r\n\t\t\t\t\tvar ret = arr[rand];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tret = this.nodes_map.get(best);\r\n\t\t\t\t}\r\n\t\t\t\t//Console Tracing Code\r\n\t\t\t\tif(TRACE) {\r\n\t\t\t\t\tthis.nodes_map.forEach((index,value) => {\r\n\t\t\t\t\t\tconsole.log(`%cMove(s) ${index} yielded ${value}`, all_moves);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log(`%cMove ${ret} was decided as the best move`, best_move);\r\n\t\t\t\t}\r\n\t\t\t\t//run a callback after calculation and return the index\r\n\t\t\t\tcallback(ret);\r\n\t\t\t\treturn ret;\r\n\t\t\t}\r\n\t\t\t//If not main call (recursive) return the heuristic value for next calculation\r\n\t\t\treturn best;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nexport default Player;\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Player.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/style.scss\n// module id = 2\n// module chunks = 0","import Board from './classes/Board';\r\nimport Player from './classes/Player';\r\nimport './style.scss';\r\n\r\n//Helpers (from http://jaketrent.com/post/addremove-classes-raw-javascript/)\r\nfunction hasClass(el, className) {\r\n  if (el.classList)\r\n    return el.classList.contains(className);\r\n  else\r\n    return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\r\n}\r\nfunction addClass(el, className) {\r\n  if (el.classList)\r\n    el.classList.add(className);\r\n  else if (!hasClass(el, className)) el.className += \" \" + className;\r\n}\r\nfunction removeClass(el, className) {\r\n  if (el.classList)\r\n    el.classList.remove(className);\r\n  else if (hasClass(el, className)) {\r\n    var reg = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n    el.className=el.className.replace(reg, ' ');\r\n  }\r\n}\r\n\r\n/*\r\nHelper function that takes the object returned from isTerminal() and adds a \r\nclass to the board that will handle drawing the winning line's animation\r\n*/\r\nfunction drawWinningLine({ direction, row }) {\r\n\tlet board = document.getElementById(\"board\");\r\n\tboard.className = `${direction}${row}`;\r\n\tsetTimeout(() => { board.className += ' full'; }, 50);\r\n}\r\n\r\n\r\n//Starts a new game with a certain depth and a starting_player of 1 if human is going to start\r\nfunction newGame(depth = -1, starting_player = 1) {\r\n\t//Instantiating a new player and an empty board\r\n\tlet p = new Player(parseInt(depth));\r\n\tlet b = new Board(['','','','','','','','','']);\r\n\r\n\t//Clearing all #Board classes and populating cells HTML\r\n\tlet board = document.getElementById(\"board\");\r\n\tboard.className = '';\r\n\tboard.innerHTML = '<div class=\"cell-0\"></div><div class=\"cell-1\"></div><div class=\"cell-2\"></div><div class=\"cell-3\"></div><div class=\"cell-4\"></div><div class=\"cell-5\"></div><div class=\"cell-6\"></div><div class=\"cell-7\"></div><div class=\"cell-8\"></div>';\r\n\t\r\n\t//Clearing all celebrations classes\r\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_human');\r\n\tremoveClass(document.getElementById(\"charachters\"), 'celebrate_robot');\r\n\r\n\t//Storing HTML cells in an array\r\n\tlet html_cells = [...board.children];\r\n\r\n\t//Initializing some variables for internal use\r\n\tlet starting = parseInt(starting_player),\r\n\t\tmaximizing = starting,\r\n\t\tplayer_turn = starting;\r\n\r\n\t//If computer is going to start, choose a random cell as long as it is the center or a corner\r\n\tif(!starting) {\r\n\t\tlet center_and_corners = [0,2,4,6,8];\r\n\t\tlet first_choice = center_and_corners[Math.floor(Math.random()*center_and_corners.length)];\r\n\t\tlet symbol = !maximizing ? 'x' : 'o';\r\n\t\tb.insert(symbol, first_choice);\r\n\t\taddClass(html_cells[first_choice], symbol);\r\n\t\tplayer_turn = 1; //Switch turns\r\n\t}\r\n\r\n\t//Adding Click event listener for each cell\r\n  \tb.state.forEach((cell, index) => {\r\n  \t\thtml_cells[index].addEventListener('click', () => {\r\n  \t\t\t//If cell is already occupied or the board is in a terminal state or it's not humans turn, return false\r\n  \t\t\tif(hasClass(html_cells[index], 'x') || hasClass(html_cells[index], 'o') || b.isTerminal() || !player_turn) return false;\r\n\r\n  \t\t\tlet symbol = maximizing ? 'x' : 'o'; //Maximizing player is always 'x'\r\n\r\n  \t\t\t//Update the Board class instance as well as the Board UI\r\n  \t\t\tb.insert(symbol, index);\r\n  \t\t\taddClass(html_cells[index], symbol);\r\n\r\n  \t\t\t//If it's a terminal move and it's not a draw, then human won\r\n  \t\t\tif(b.isTerminal()) {\r\n  \t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_human');\r\n  \t\t\t\tdrawWinningLine(b.isTerminal());\r\n  \t\t\t}\r\n  \t\t\tplayer_turn = 0; //Switch turns\r\n\r\n  \t\t\t//Get computer's best move and update the UI\r\n  \t\t\tp.getBestMove(b, !maximizing, best => {\r\n  \t\t\t\tlet symbol = !maximizing ? 'x' : 'o';\r\n  \t\t\t\tb.insert(symbol, best);\r\n  \t\t\t\taddClass(html_cells[best], symbol);\r\n  \t\t\t\tif(b.isTerminal()) {\r\n\t  \t\t\t\tlet { winner } = b.isTerminal();\r\n\t\t\t\t\tif(winner !== 'draw') addClass(document.getElementById(\"charachters\"), 'celebrate_robot');\r\n\t  \t\t\t\tdrawWinningLine(b.isTerminal());\r\n\t  \t\t\t}\r\n  \t\t\t\tplayer_turn = 1; //Switch turns\r\n  \t\t\t});\r\n  \t\t}, false);\r\n  \t\tif(cell) addClass(html_cells[index], cell);\r\n  \t});\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", event => { \r\n\r\n\t//Start a new game when page loads with default values\r\n\tlet depth = -1;\r\n\tlet starting_player = 1;\r\n\tnewGame(depth, starting_player);\r\n\r\n\r\n\t//Events handlers for depth, starting player options\r\n\tdocument.getElementById(\"depth\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet depth_choices = [...document.getElementById(\"depth\").children[0].children];\r\n\t\tdepth_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tdepth = event.target.dataset.value;\r\n\t}, false);\r\n\r\n\tdocument.getElementById(\"starting_player\").addEventListener(\"click\", (event) => {\r\n\t\tif(event.target.tagName !== \"LI\" || hasClass(event.target, 'active')) return\r\n\t\tlet starting_player_choices = [...document.getElementById(\"starting_player\").children[0].children];\r\n\t\tstarting_player_choices.forEach((choice) => {\r\n\t\t\tremoveClass(choice, 'active');\r\n\t\t});\r\n\t\taddClass(event.target, 'active');\r\n\t\tstarting_player = event.target.dataset.value;\r\n\t}, false);\r\n\r\n\tdocument.getElementById(\"newgame\").addEventListener('click', () => {\r\n\t\tnewGame(depth, starting_player);\r\n\t});\r\n\r\n});\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}